const { Web3 } = require('web3');
const web3 = new Web3('https://rpc.mordor.etccooperative.org');


const contractABI = [
	{
		"inputs": [
			{
				"internalType": "address payable",
				"name": "_recipient",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [],
		"name": "fund",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "recipient",
		"outputs": [
			{
				"internalType": "address payable",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]; // Replace with the ABI obtained from compilation
const contractBytecode = '608060405234801561001057600080fd5b50604051610299380380610299833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b610182806101176000396000f3fe6080604052600436106100295760003560e01c806366d003ac1461002e578063b60d428814610059575b600080fd5b34801561003a57600080fd5b50610043610063565b6040516100509190610131565b60405180910390f35b610061610087565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156100ed573d6000803e3d6000fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061011b826100f0565b9050919050565b61012b81610110565b82525050565b60006020820190506101466000830184610122565b9291505056fea2646970667358221220a7daf2b20e5cd7393d48660eefdc921dd96cb58ca97420a5c3b13fa8eb3224d764736f6c63430008120033'; // Replace with the bytecode obtained from compilation
const recipientAddress = '0xEA05220Fdb1A495d0fA007242Bc39570C736E150'; // Replace with the recipient's Ethereum address

async function deployFundMe() {
    try {
        const accounts = await web3.eth.requestAccounts(); // Request permission to access MetaMask accounts

        const contract = new web3.eth.Contract(contractABI);

        const deployedContract = await contract
            .deploy({ data: contractBytecode, arguments: [recipientAddress] })
            .send({ from: accounts[0], gas: '3000000' });

        console.log('Contract deployed at address:', deployedContract.options.address);
    } catch (error) {
        console.error('Error deploying FundMe contract:', error);
    }
}

deployFundMe();
